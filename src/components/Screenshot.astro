---
import { Image } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  caption?: string;
  class?: string;
  width?: number;
  height?: number;
}

const { 
  src, 
  alt, 
  caption,
  class: className = '',
  width = 1200,
  height = 800
} = Astro.props;

// Generate unique ID for this screenshot instance
const screenshotId = `screenshot-${Math.random().toString(36).substr(2, 9)}`;
const modalId = `modal-${screenshotId}`;
const titleId = `title-${screenshotId}`;
---

<figure class={`screenshot-container not-prose prose-base ${className}`}>
  <button 
    type="button"
    class="screenshot-button group relative block w-full cursor-zoom-in overflow-hidden rounded-xl border border-gray-200 bg-white p-3 shadow-sm transition-all hover:shadow-lg hover:border-primary/20 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
    data-screenshot-trigger={screenshotId}
    aria-label={`View full size image: ${alt}`}
  >
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      class="h-auto w-full rounded-lg transition-transform group-hover:scale-[1.01]"
      loading="lazy"
      sizes="(max-width: 640px) 100vw, (max-width: 768px) 90vw, (max-width: 1024px) 80vw, 70vw"
      widths={[320, 640, 768, 1024, 1280, 1600]}
      format="webp"
    />
    
    <!-- Hover overlay with zoom icon -->
    <div class="absolute inset-0 flex items-center justify-center bg-black/0 transition-all group-hover:bg-black/10">
      <div class="flex h-12 w-12 items-center justify-center rounded-full bg-white/0 text-white opacity-0 shadow-lg transition-all group-hover:bg-white/90 group-hover:text-primary group-hover:opacity-100">
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
        </svg>
      </div>
    </div>
  </button>
  
  {caption && (
    <figcaption class="mt-2 text-center text-sm text-gray-600">
      {caption}
    </figcaption>
  )}
</figure>

<!-- Modal for full-size view -->
<div 
  class="screenshot-modal fixed inset-0 z-50 hidden items-center justify-center bg-black/80 p-6"
  data-screenshot-modal={screenshotId}
  role="dialog"
  aria-labelledby={titleId}
  aria-modal="true"
>
  <div class="relative max-h-[92vh] max-w-[92vw] overflow-hidden rounded-xl bg-white shadow-2xl">
    <!-- Modal Header -->
    <div class="flex items-center justify-between border-b border-gray-200 px-6 py-4">
      <h3 id={titleId} class="text-xl font-semibold text-gray-900 pr-4">
        {alt}
      </h3>
      <button
        type="button"
        class="screenshot-close flex h-10 w-10 items-center justify-center rounded-lg text-gray-400 transition-colors hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        data-screenshot-close={screenshotId}
        aria-label="Close image"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Modal Content -->
    <div class="overflow-auto p-6">
      <Image
        src={src}
        alt={alt}
        width={width}
        height={height}
        class="h-auto max-w-full rounded-lg"
        loading="lazy"
        format="webp"
      />
    </div>

    {caption && (
      <div class="border-t border-gray-200 bg-gray-50 px-6 py-4">
        <p class="text-sm text-gray-600 leading-relaxed">{caption}</p>
      </div>
    )}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle opening modals
    document.querySelectorAll('[data-screenshot-trigger]').forEach(function(trigger) {
      trigger.addEventListener('click', function() {
        const modalId = trigger.getAttribute('data-screenshot-trigger');
        const modal = document.querySelector('[data-screenshot-modal="' + modalId + '"]');
        if (modal) {
          modal.classList.remove('hidden');
          modal.classList.add('flex');
          document.body.style.overflow = 'hidden';
          
          // Focus management
          const closeButton = modal.querySelector('[data-screenshot-close]');
          if (closeButton) closeButton.focus();
        }
      });
    });

    // Handle closing modals
    document.querySelectorAll('[data-screenshot-close]').forEach(function(closeBtn) {
      closeBtn.addEventListener('click', function() {
        const modalId = closeBtn.getAttribute('data-screenshot-close');
        const modal = document.querySelector('[data-screenshot-modal="' + modalId + '"]');
        const trigger = document.querySelector('[data-screenshot-trigger="' + modalId + '"]');
        
        if (modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
          document.body.style.overflow = '';
          
          // Return focus to trigger
          if (trigger) trigger.focus();
        }
      });
    });

    // Close on backdrop click
    document.querySelectorAll('[data-screenshot-modal]').forEach(function(modal) {
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          const modalId = modal.getAttribute('data-screenshot-modal');
          const closeBtn = modal.querySelector('[data-screenshot-close]');
          if (closeBtn) closeBtn.click();
        }
      });
    });

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const openModal = document.querySelector('[data-screenshot-modal]:not(.hidden)');
        if (openModal) {
          const closeBtn = openModal.querySelector('[data-screenshot-close]');
          if (closeBtn) closeBtn.click();
        }
      }
    });
  });
</script>

<style>
  .screenshot-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
  
  .screenshot-button:focus-visible {
    outline: 2px solid transparent;
    outline-offset: 2px;
    box-shadow: 0 0 0 2px white, 0 0 0 4px #00AC8A;
  }

  .screenshot-modal {
    backdrop-filter: blur(8px);
  }

  /* Completely reset prose styles in modal */
  .screenshot-modal,
  .screenshot-modal * {
    /* Reset Typography plugin CSS custom properties */
    --tw-prose-body: inherit !important;
    --tw-prose-headings: inherit !important;
    --tw-prose-lead: inherit !important;
    --tw-prose-links: inherit !important;
    --tw-prose-bold: inherit !important;
    --tw-prose-counters: inherit !important;
    --tw-prose-bullets: inherit !important;
    --tw-prose-hr: inherit !important;
    --tw-prose-quotes: inherit !important;
    --tw-prose-quote-borders: inherit !important;
    --tw-prose-captions: inherit !important;
    --tw-prose-kbd: inherit !important;
    --tw-prose-code: inherit !important;
    --tw-prose-pre-code: inherit !important;
    --tw-prose-pre-bg: inherit !important;
    --tw-prose-th-borders: inherit !important;
    --tw-prose-td-borders: inherit !important;

    /* Reset font styling */
    font-size: inherit !important;
    line-height: inherit !important;
    margin: 0 !important;
    max-width: none !important;
  }

  /* Ensure modal content doesn't exceed viewport */
  .screenshot-modal img {
    max-height: calc(90vh - 200px);
    object-fit: contain;
  }

  /* Restore intended modal styling */
  .screenshot-modal h3 {
    font-size: 1.25rem !important; /* text-xl */
    line-height: 1.75rem !important;
    font-weight: 600 !important; /* font-semibold */
    color: rgb(17 24 39) !important; /* text-gray-900 */
  }

  .screenshot-modal p {
    font-size: 0.875rem !important; /* text-sm */
    line-height: 1.5rem !important;
    color: rgb(75 85 99) !important; /* text-gray-600 */
  }

  /* Smooth modal animations */
  .screenshot-modal.flex {
    animation: modalFadeIn 0.15s ease-out;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
